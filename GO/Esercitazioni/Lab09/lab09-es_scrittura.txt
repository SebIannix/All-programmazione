Laboratorio 09 - 05/12/2019 - ESERCIZI
======================================

Argomenti: 
- uso di array e mappe per problemi di conteggio
- array bidimensionali
- operazioni su slice con append, copy e subslicing

Cifre
=====

Scrivere un programma cifre.go dotato di
- una funzione
	contaCifre(s string) [10]int
che restituisce un array di lunghezza 10 che contiene il numero di
0, 1, 2, ... e 9 (in quest'ordine,) che si trovano nella stringa s.
Non ci sono vincoli sui tipi di caratteri in s.

- una funzione main() che legge una frase (tra "") da linea di 
comando che contiene caratteri di qualsiasi tipo (cifre, lettere, 
simboli, punteggiatura, lettere accentate, ecc.) e stampa quante 
cifre di ogni tipo ci sono, ignorando gli eventuali altri caratteri.
Se manca l'argomento da linea di comando, deve stampare 
"manca argomento" e terminare.

Esempio
-------

Input: "1, 2, 3; non c’è fiaba senza re; 1, 2, 3; venite giù da me; 4, 5, 6; siete dei babbei; 7,8,9; io sono già altrove."
Output: [0 2 2 2 1 1 1 1 1 1]

_______________________________________

Vocali
======

Scrivere un programma vocali.go che analizza un testo e conta
le occorrenze delle vocali (sia minuscole che maiuscole, 
ma non le accentate) nel testo e stampa, ma solo per le vocali
presenti nel testo, il numero di volte che vocali sono presenti
nel testo.

In particolare il programma è dotato di:

- una funzione
	func ContaVocali(s string, vocali map[rune]int)
per contare le occorrenze delle diverse vocali in una stringa
(sia minuscole che maiuscole, separatamente - vedi es sotto).
La funzione, data una stringa s e una mappa vocali, aggiorna 
opportunamente la mappa vocali aggiungendo 
eventuali vocali non ancora presenti / incrementandone i valori.

- una funzione
	func main()
che legge una riga di testo da standard input e produce una mappa 
tra vocali presenti nel testo e il numero delle loro occorrenze nel testo,
e la stampa.


Esempio
-------

se l'input è:

jdhkas c'è dkasjhkdjashkdh askdh ksah @@@ €€€ ### Ħ  wi) Ø qwqwe qwyewquteuqwte q 312312 2312wweqe €łłŧŧŧŧŧ sdasdas AA JKJLKLJLKJ LIIIIII U u ù aeiou 	AEIOU

l'output è (salvo l'ordine di stampa):
o : 1
E : 1
u : 4
U : 2
e : 7
A : 3
I : 7
O : 1
a : 8
i : 2

Nota 1 - dichiarazione di una map

sintassi:	var map1 map[keytype]valuetype

es:		var map1 map[string]int

Nota 2 - allocazione(creazione)/inizializzazione di una map

sintassi:	map1 := make(map[keytype]valuetype)
o anche:	map1 := map[keytype]valuetype{}

es:		map1 := make(map[string]float64)
o anche: 	map1 := map[string]float64{}

_______________________________________

Anagrammi
=========

Scrivere un programma anagrammi.go che legge due stringhe 
da linea di comando e valuta se le due stringhe sono 
una l'anagramma dell'altra.

In particolare il programma è dotato di:

- una funzione
	func isAnagram(s1, s2 string) bool
che restituisce true se le due stringhe sono una l'anagramma dell'altra,
false altrimenti

- una funzione
	func main()
che legge due parole p1 e p2 da linea di comando e stampa uno dei due messaggi:
p1 e p2 sono anagrammi
p1 e p2 non sono anagrammi

In assenza di due parametri sulla linea di comando il programma stampa:
mancanza di input 

_______________________________________

Galleggianti
=============

Scrivete un programma galleggianti.go che legga da standard
input due interi r, c, seguiti da una matrice di r righe 
e c colonne contenente lettere maiuscole e asterischi, 
e che stampi in output la matrice che si ottiene da quella 
in input mandando verso il basso le lettere e facendo 
galleggiare gli asterischi. 

Fornire l'input una riga della matrice alla volta, sfruttando
la funzione strings.Split(s, " ").


Esempio
-------

Se la matrice è data da

V * S
* * B
K * *
* S *

il programma dovrà stampare la matrice seguente:

* * *
* * *
V * S
K S B

_______________________________________

Operazioni su slice
===================

Go mette a disposizione alcune funzioni built-in

- func append(slice []Type, elems ...Type) []Type
- func copy(dst, src []Type) int
(vedi documentazione packages, sotto builtin)

Scrivere un programma operazioni_slice.go che
fa, una alla volta, le seguenti operazioni su slice,
stampando poi il risultato ottenuto.

Date voi dei valori opportuni alle variabili (slice,
i, j, ...)

- crea due slice a e b di interi, appende 
la seconda alla prima e stampa la slice risultante

- crea una nuova slice b e vi copia a

- cancella l'elemento di indice i dalla slice a 

- cancella gli elementi da i a j dalla slice a

- estende la slice a con una nuova slice di lunghezza j 

- inserisce l'elemento x in posizione i

- inserisce una nuova slice di lunghezza j in posizione i

- inserisce la slice b in posizione i

- estrae, cancellandolo dalla slice (pop) l'ultimo elemento della slice a

- aggiunge alla fine della slice a un nuovo elemento x (push)

_______________________________________

Moda
====

Scrivere un programma statistiche.go dotato di

- una funzione
	moda(serie []float64) float64
  che, data una serie di numeri, restituisce la loro moda. 
In presenza di due (o più) mode, si restituisca la più piccola.

Nota. La moda di una serie di numeri è il valore 
che compare più frequentemente nella serie.

_______________________________________

Frequenze parole
================
Scrivere un programma frequenze_parole.go dotato delle seguenti funzioni:

- func frequenze(s []string) map[string]int 
che data una slice s di stringhe, restituisce una mappa che associa 
a ogni stringa di s il numero di volte che essa compare nella slice

- func main() 
che legge da standard input una sequenza di stringhe e produce su 
standard output la mappa delle frequenze delle stringhe della sequenza

Nota: per terminare l’input da tastiera, premere invio e la combinazione 
di tasti Ctrl D, che corrisponde a EOF (end of file) per lo standard input. 
In caso di dubbi su come gestire la fine dell’input nel programma, 
consultare la documentazione della funzione Scan, funzione che, 
oltre a salvare i valori letti, restituisce dei valori.


Esempio
-------
Per il seguente input

aa bb cc d aa cc aa

l’output di frequenze.go sara`: 

map[d:1 aa:3 bb:1 cc:2]

_______________________________________

Lessico
=======

Scrivere un programma lessico.go che
- stampa il seguente menu di opzioni
	+ (Legge una riga e memorizza le parole)
	? (Legge una parola e indica le righe che la contengono)
	p (Stampa le parole)

- legge stringhe da standard input
- il programma termina quando riceve un "end of file" (cioè EOF, pressione di 'CTRL-d')

Se la stringa inizia con:
- "+" (alimenta dizionario): il programma usa il rimanente della riga e memorizza in un "dizionario" le parole che la costituiscono;
- "?" (consulta dizionario): il programma usa il rimanente della riga e stampa i numeri di riga del dizionario 	in cui è comparsa la stringa;
- "p" (print): il programma stampa le parole presenti nel  "dizionario", con l’elenco dei numeri di riga in cui compaiono;


Esempio
-------

+ (Legge una riga e memorizza le parole)
? (Legge una parola e indica le riga che la contengono)
p (Stampa le parole)
+ la befana ha il fazzoletto e la gonna rattoppata
p
map[rattoppata:[1] la:[1 1] befana:[1] ha:[1] il:[1] fazzoletto:[1] e:[1] gonna:[1]]
+ ma quest'anno poverina la befana è raffreddata
? la
parola: la
righe [1 1 2]
? befana
parola: befana
righe [1 2]
? il
parola: il
righe [1]
p
map[raffreddata:[2] la:[1 1 2] il:[1] fazzoletto:[1] ma:[2] quest'anno:[2] poverina:[2] è:[2] befana:[1 2] ha:[1] e:[1] gonna:[1] rattoppata:[1]]

_______________________________________







